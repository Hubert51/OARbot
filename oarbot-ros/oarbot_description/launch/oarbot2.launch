<?xml version="1.0"?>
<launch>

  <!-- Load the URDF into ROS parameter server -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find oarbot_description)/robot/oarbot.urdf.xacro' --inorder" />

  <arg name="kinova_robotType" default="j2n6s300"/>
  <arg name="kinova_robotName" default="$(arg kinova_robotType)"/>
  <arg name="use_trajectory_controller" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="is7dof" default="false"/>
  <arg name="use_urdf" default="true"/>
  <arg name="kinova_robotSerial" default="not_set" />
  
  <!-- <rosparam file="$(find kinova_control)/config/$(arg kinova_robotName)_control.yaml" command="load"/> -->
  <rosparam file="$(find oarbot_control)/config/oarbot_control.yaml" command="load"/>


  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find kinova_gazebo)/worlds/oarbot.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Publish joint values -->
  <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" /> -->

  <!-- convert joint states to TF transforms for rviz, etc  -->
  <!-- robot_state_publisher is for kinova arm controller -->
  <!-- <node name="robot_state_publisher2" pkg="robot_state_publisher" type="state_publisher"/> -->
  <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/> -->


  <!-- Spawn model -->
  <!-- Ruijie: modified respawn tag-->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf   -model summit -param robot_description
    -x 0 -y 0 -z 0
    -J $(arg kinova_robotType)_joint_1 0.0
        -J $(arg kinova_robotType)_joint_2 2.9
        -J $(arg kinova_robotType)_joint_3 1.3
        -J $(arg kinova_robotType)_joint_4 -2.07
        -J $(arg kinova_robotType)_joint_5 1.4
        -J $(arg kinova_robotType)_joint_6 0.0
        -J $(arg kinova_robotType)_joint_finger_1 1.0
        -J $(arg kinova_robotType)_joint_finger_2 1.0
        -J $(arg kinova_robotType)_joint_finger_3 1.0"/>

  <!-- ros_control launch file -->
<!--   <include file="$(find kinova_control)/launch/kinova_control.launch">
    <arg name="kinova_robotName" value="$(arg kinova_robotName)"/>
    <arg name="kinova_robotType" value="$(arg kinova_robotType)"/>
    <arg name="use_trajectory_controller" value="$(arg use_trajectory_controller)"/>
    <arg name="is7dof" value="$(arg is7dof)"/>
  </include> -->


  <!-- Effort Joint trajectory controller-->
<!--   <group if="$(arg use_trajectory_controller)">
    <node name="$(arg kinova_robotName)_trajectory_controller" pkg="controller_manager" type="spawner" 
      output="screen" ns="$(arg kinova_robotName)" 
      args="effort_joint_trajectory_controller
      effort_finger_trajectory_controller    
      joint_state_controller"/>    
  </group> -->

  <!-- Kinova controller -->
<!--   <group if="$(arg use_trajectory_controller)">
    <node name="$(arg kinova_robotName)_trajectory_controller" pkg="controller_manager" type="spawner" 
      output="screen" ns="$(arg kinova_robotName)" 
      args="
      j2n6s300
      j2n6s300_gripper
      joint_state_controller"/>    
  </group> -->

  <!-- oarbot controller -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="$(arg kinova_robotName)" args="arm gripper joint_state_controller"/>

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">    
    <remap from="/joint_states" to="/$(arg kinova_robotName)/joint_states"/>    
  </node>
  
<!--   <node name="command_robot_home_pose" pkg="kinova_control" type="move_robot.py"
        respawn="false" output="screen" args="$(arg kinova_robotType)">       
  </node> -->


</launch>

