classdef CartesianForce < robotics.ros.Message
    %CartesianForce MATLAB implementation of kinova_msgs/CartesianForce
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'kinova_msgs/CartesianForce' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'b01974557c40b776cdb7003057779989' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        ForceX
        ForceY
        ForceZ
        TorqueX
        TorqueY
        TorqueZ
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ForceX', 'ForceY', 'ForceZ', 'TorqueX', 'TorqueY', 'TorqueZ'} % List of non-constant message properties
        ROSPropertyList = {'force_x', 'force_y', 'force_z', 'torque_x', 'torque_y', 'torque_z'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = CartesianForce(msg)
            %CartesianForce Construct the message object CartesianForce
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function forcex = get.ForceX(obj)
            %get.ForceX Get the value for property ForceX
            forcex = single(obj.JavaMessage.getForceX);
        end
        
        function set.ForceX(obj, forcex)
            %set.ForceX Set the value for property ForceX
            validateattributes(forcex, {'numeric'}, {'nonempty', 'scalar'}, 'CartesianForce', 'ForceX');
            
            obj.JavaMessage.setForceX(forcex);
        end
        
        function forcey = get.ForceY(obj)
            %get.ForceY Get the value for property ForceY
            forcey = single(obj.JavaMessage.getForceY);
        end
        
        function set.ForceY(obj, forcey)
            %set.ForceY Set the value for property ForceY
            validateattributes(forcey, {'numeric'}, {'nonempty', 'scalar'}, 'CartesianForce', 'ForceY');
            
            obj.JavaMessage.setForceY(forcey);
        end
        
        function forcez = get.ForceZ(obj)
            %get.ForceZ Get the value for property ForceZ
            forcez = single(obj.JavaMessage.getForceZ);
        end
        
        function set.ForceZ(obj, forcez)
            %set.ForceZ Set the value for property ForceZ
            validateattributes(forcez, {'numeric'}, {'nonempty', 'scalar'}, 'CartesianForce', 'ForceZ');
            
            obj.JavaMessage.setForceZ(forcez);
        end
        
        function torquex = get.TorqueX(obj)
            %get.TorqueX Get the value for property TorqueX
            torquex = single(obj.JavaMessage.getTorqueX);
        end
        
        function set.TorqueX(obj, torquex)
            %set.TorqueX Set the value for property TorqueX
            validateattributes(torquex, {'numeric'}, {'nonempty', 'scalar'}, 'CartesianForce', 'TorqueX');
            
            obj.JavaMessage.setTorqueX(torquex);
        end
        
        function torquey = get.TorqueY(obj)
            %get.TorqueY Get the value for property TorqueY
            torquey = single(obj.JavaMessage.getTorqueY);
        end
        
        function set.TorqueY(obj, torquey)
            %set.TorqueY Set the value for property TorqueY
            validateattributes(torquey, {'numeric'}, {'nonempty', 'scalar'}, 'CartesianForce', 'TorqueY');
            
            obj.JavaMessage.setTorqueY(torquey);
        end
        
        function torquez = get.TorqueZ(obj)
            %get.TorqueZ Get the value for property TorqueZ
            torquez = single(obj.JavaMessage.getTorqueZ);
        end
        
        function set.TorqueZ(obj, torquez)
            %set.TorqueZ Set the value for property TorqueZ
            validateattributes(torquez, {'numeric'}, {'nonempty', 'scalar'}, 'CartesianForce', 'TorqueZ');
            
            obj.JavaMessage.setTorqueZ(torquez);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ForceX = obj.ForceX;
            cpObj.ForceY = obj.ForceY;
            cpObj.ForceZ = obj.ForceZ;
            cpObj.TorqueX = obj.TorqueX;
            cpObj.TorqueY = obj.TorqueY;
            cpObj.TorqueZ = obj.TorqueZ;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ForceX = strObj.ForceX;
            obj.ForceY = strObj.ForceY;
            obj.ForceZ = strObj.ForceZ;
            obj.TorqueX = strObj.TorqueX;
            obj.TorqueY = strObj.TorqueY;
            obj.TorqueZ = strObj.TorqueZ;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ForceX = obj.ForceX;
            strObj.ForceY = obj.ForceY;
            strObj.ForceZ = obj.ForceZ;
            strObj.TorqueX = obj.TorqueX;
            strObj.TorqueY = obj.TorqueY;
            strObj.TorqueZ = obj.TorqueZ;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.kinova_msgs.CartesianForce.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.kinova_msgs.CartesianForce;
            obj.reload(strObj);
        end
    end
end
