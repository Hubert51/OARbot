classdef JointTorque < robotics.ros.Message
    %JointTorque MATLAB implementation of kinova_msgs/JointTorque
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'kinova_msgs/JointTorque' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'bf16c4e5154848a0767d1aaab0a4796b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Joint1
        Joint2
        Joint3
        Joint4
        Joint5
        Joint6
        Joint7
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Joint1', 'Joint2', 'Joint3', 'Joint4', 'Joint5', 'Joint6', 'Joint7'} % List of non-constant message properties
        ROSPropertyList = {'joint1', 'joint2', 'joint3', 'joint4', 'joint5', 'joint6', 'joint7'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = JointTorque(msg)
            %JointTorque Construct the message object JointTorque
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function joint1 = get.Joint1(obj)
            %get.Joint1 Get the value for property Joint1
            joint1 = single(obj.JavaMessage.getJoint1);
        end
        
        function set.Joint1(obj, joint1)
            %set.Joint1 Set the value for property Joint1
            validateattributes(joint1, {'numeric'}, {'nonempty', 'scalar'}, 'JointTorque', 'Joint1');
            
            obj.JavaMessage.setJoint1(joint1);
        end
        
        function joint2 = get.Joint2(obj)
            %get.Joint2 Get the value for property Joint2
            joint2 = single(obj.JavaMessage.getJoint2);
        end
        
        function set.Joint2(obj, joint2)
            %set.Joint2 Set the value for property Joint2
            validateattributes(joint2, {'numeric'}, {'nonempty', 'scalar'}, 'JointTorque', 'Joint2');
            
            obj.JavaMessage.setJoint2(joint2);
        end
        
        function joint3 = get.Joint3(obj)
            %get.Joint3 Get the value for property Joint3
            joint3 = single(obj.JavaMessage.getJoint3);
        end
        
        function set.Joint3(obj, joint3)
            %set.Joint3 Set the value for property Joint3
            validateattributes(joint3, {'numeric'}, {'nonempty', 'scalar'}, 'JointTorque', 'Joint3');
            
            obj.JavaMessage.setJoint3(joint3);
        end
        
        function joint4 = get.Joint4(obj)
            %get.Joint4 Get the value for property Joint4
            joint4 = single(obj.JavaMessage.getJoint4);
        end
        
        function set.Joint4(obj, joint4)
            %set.Joint4 Set the value for property Joint4
            validateattributes(joint4, {'numeric'}, {'nonempty', 'scalar'}, 'JointTorque', 'Joint4');
            
            obj.JavaMessage.setJoint4(joint4);
        end
        
        function joint5 = get.Joint5(obj)
            %get.Joint5 Get the value for property Joint5
            joint5 = single(obj.JavaMessage.getJoint5);
        end
        
        function set.Joint5(obj, joint5)
            %set.Joint5 Set the value for property Joint5
            validateattributes(joint5, {'numeric'}, {'nonempty', 'scalar'}, 'JointTorque', 'Joint5');
            
            obj.JavaMessage.setJoint5(joint5);
        end
        
        function joint6 = get.Joint6(obj)
            %get.Joint6 Get the value for property Joint6
            joint6 = single(obj.JavaMessage.getJoint6);
        end
        
        function set.Joint6(obj, joint6)
            %set.Joint6 Set the value for property Joint6
            validateattributes(joint6, {'numeric'}, {'nonempty', 'scalar'}, 'JointTorque', 'Joint6');
            
            obj.JavaMessage.setJoint6(joint6);
        end
        
        function joint7 = get.Joint7(obj)
            %get.Joint7 Get the value for property Joint7
            joint7 = single(obj.JavaMessage.getJoint7);
        end
        
        function set.Joint7(obj, joint7)
            %set.Joint7 Set the value for property Joint7
            validateattributes(joint7, {'numeric'}, {'nonempty', 'scalar'}, 'JointTorque', 'Joint7');
            
            obj.JavaMessage.setJoint7(joint7);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Joint1 = obj.Joint1;
            cpObj.Joint2 = obj.Joint2;
            cpObj.Joint3 = obj.Joint3;
            cpObj.Joint4 = obj.Joint4;
            cpObj.Joint5 = obj.Joint5;
            cpObj.Joint6 = obj.Joint6;
            cpObj.Joint7 = obj.Joint7;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Joint1 = strObj.Joint1;
            obj.Joint2 = strObj.Joint2;
            obj.Joint3 = strObj.Joint3;
            obj.Joint4 = strObj.Joint4;
            obj.Joint5 = strObj.Joint5;
            obj.Joint6 = strObj.Joint6;
            obj.Joint7 = strObj.Joint7;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Joint1 = obj.Joint1;
            strObj.Joint2 = obj.Joint2;
            strObj.Joint3 = obj.Joint3;
            strObj.Joint4 = obj.Joint4;
            strObj.Joint5 = obj.Joint5;
            strObj.Joint6 = obj.Joint6;
            strObj.Joint7 = obj.Joint7;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.kinova_msgs.JointTorque.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.kinova_msgs.JointTorque;
            obj.reload(strObj);
        end
    end
end
