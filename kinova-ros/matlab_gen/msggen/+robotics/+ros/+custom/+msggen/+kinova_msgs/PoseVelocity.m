classdef PoseVelocity < robotics.ros.Message
    %PoseVelocity MATLAB implementation of kinova_msgs/PoseVelocity
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'kinova_msgs/PoseVelocity' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '37cb696ff239fbcc6aa4a04f7318d9da' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        TwistLinearX
        TwistLinearY
        TwistLinearZ
        TwistAngularX
        TwistAngularY
        TwistAngularZ
    end
    
    properties (Constant, Hidden)
        PropertyList = {'TwistAngularX', 'TwistAngularY', 'TwistAngularZ', 'TwistLinearX', 'TwistLinearY', 'TwistLinearZ'} % List of non-constant message properties
        ROSPropertyList = {'twist_angular_x', 'twist_angular_y', 'twist_angular_z', 'twist_linear_x', 'twist_linear_y', 'twist_linear_z'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = PoseVelocity(msg)
            %PoseVelocity Construct the message object PoseVelocity
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function twistlinearx = get.TwistLinearX(obj)
            %get.TwistLinearX Get the value for property TwistLinearX
            twistlinearx = single(obj.JavaMessage.getTwistLinearX);
        end
        
        function set.TwistLinearX(obj, twistlinearx)
            %set.TwistLinearX Set the value for property TwistLinearX
            validateattributes(twistlinearx, {'numeric'}, {'nonempty', 'scalar'}, 'PoseVelocity', 'TwistLinearX');
            
            obj.JavaMessage.setTwistLinearX(twistlinearx);
        end
        
        function twistlineary = get.TwistLinearY(obj)
            %get.TwistLinearY Get the value for property TwistLinearY
            twistlineary = single(obj.JavaMessage.getTwistLinearY);
        end
        
        function set.TwistLinearY(obj, twistlineary)
            %set.TwistLinearY Set the value for property TwistLinearY
            validateattributes(twistlineary, {'numeric'}, {'nonempty', 'scalar'}, 'PoseVelocity', 'TwistLinearY');
            
            obj.JavaMessage.setTwistLinearY(twistlineary);
        end
        
        function twistlinearz = get.TwistLinearZ(obj)
            %get.TwistLinearZ Get the value for property TwistLinearZ
            twistlinearz = single(obj.JavaMessage.getTwistLinearZ);
        end
        
        function set.TwistLinearZ(obj, twistlinearz)
            %set.TwistLinearZ Set the value for property TwistLinearZ
            validateattributes(twistlinearz, {'numeric'}, {'nonempty', 'scalar'}, 'PoseVelocity', 'TwistLinearZ');
            
            obj.JavaMessage.setTwistLinearZ(twistlinearz);
        end
        
        function twistangularx = get.TwistAngularX(obj)
            %get.TwistAngularX Get the value for property TwistAngularX
            twistangularx = single(obj.JavaMessage.getTwistAngularX);
        end
        
        function set.TwistAngularX(obj, twistangularx)
            %set.TwistAngularX Set the value for property TwistAngularX
            validateattributes(twistangularx, {'numeric'}, {'nonempty', 'scalar'}, 'PoseVelocity', 'TwistAngularX');
            
            obj.JavaMessage.setTwistAngularX(twistangularx);
        end
        
        function twistangulary = get.TwistAngularY(obj)
            %get.TwistAngularY Get the value for property TwistAngularY
            twistangulary = single(obj.JavaMessage.getTwistAngularY);
        end
        
        function set.TwistAngularY(obj, twistangulary)
            %set.TwistAngularY Set the value for property TwistAngularY
            validateattributes(twistangulary, {'numeric'}, {'nonempty', 'scalar'}, 'PoseVelocity', 'TwistAngularY');
            
            obj.JavaMessage.setTwistAngularY(twistangulary);
        end
        
        function twistangularz = get.TwistAngularZ(obj)
            %get.TwistAngularZ Get the value for property TwistAngularZ
            twistangularz = single(obj.JavaMessage.getTwistAngularZ);
        end
        
        function set.TwistAngularZ(obj, twistangularz)
            %set.TwistAngularZ Set the value for property TwistAngularZ
            validateattributes(twistangularz, {'numeric'}, {'nonempty', 'scalar'}, 'PoseVelocity', 'TwistAngularZ');
            
            obj.JavaMessage.setTwistAngularZ(twistangularz);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.TwistLinearX = obj.TwistLinearX;
            cpObj.TwistLinearY = obj.TwistLinearY;
            cpObj.TwistLinearZ = obj.TwistLinearZ;
            cpObj.TwistAngularX = obj.TwistAngularX;
            cpObj.TwistAngularY = obj.TwistAngularY;
            cpObj.TwistAngularZ = obj.TwistAngularZ;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.TwistLinearX = strObj.TwistLinearX;
            obj.TwistLinearY = strObj.TwistLinearY;
            obj.TwistLinearZ = strObj.TwistLinearZ;
            obj.TwistAngularX = strObj.TwistAngularX;
            obj.TwistAngularY = strObj.TwistAngularY;
            obj.TwistAngularZ = strObj.TwistAngularZ;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.TwistLinearX = obj.TwistLinearX;
            strObj.TwistLinearY = obj.TwistLinearY;
            strObj.TwistLinearZ = obj.TwistLinearZ;
            strObj.TwistAngularX = obj.TwistAngularX;
            strObj.TwistAngularY = obj.TwistAngularY;
            strObj.TwistAngularZ = obj.TwistAngularZ;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.kinova_msgs.PoseVelocity.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.kinova_msgs.PoseVelocity;
            obj.reload(strObj);
        end
    end
end
