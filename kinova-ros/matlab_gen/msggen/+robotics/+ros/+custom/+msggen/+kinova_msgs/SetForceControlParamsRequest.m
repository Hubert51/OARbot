classdef SetForceControlParamsRequest < robotics.ros.Message
    %SetForceControlParamsRequest MATLAB implementation of kinova_msgs/SetForceControlParamsRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'kinova_msgs/SetForceControlParamsRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5c0999be3d1c60dba47ea0b2fd08231e' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
    end
    
    properties (Dependent)
        InertiaLinear
        InertiaAngular
        DampingLinear
        DampingAngular
        ForceMinLinear
        ForceMinAngular
        ForceMaxLinear
        ForceMaxAngular
    end
    
    properties (Access = protected)
        Cache = struct('InertiaLinear', [], 'InertiaAngular', [], 'DampingLinear', [], 'DampingAngular', [], 'ForceMinLinear', [], 'ForceMinAngular', [], 'ForceMaxLinear', [], 'ForceMaxAngular', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'DampingAngular', 'DampingLinear', 'ForceMaxAngular', 'ForceMaxLinear', 'ForceMinAngular', 'ForceMinLinear', 'InertiaAngular', 'InertiaLinear'} % List of non-constant message properties
        ROSPropertyList = {'damping_angular', 'damping_linear', 'force_max_angular', 'force_max_linear', 'force_min_angular', 'force_min_linear', 'inertia_angular', 'inertia_linear'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SetForceControlParamsRequest(msg)
            %SetForceControlParamsRequest Construct the message object SetForceControlParamsRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function inertialinear = get.InertiaLinear(obj)
            %get.InertiaLinear Get the value for property InertiaLinear
            if isempty(obj.Cache.InertiaLinear)
                obj.Cache.InertiaLinear = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getInertiaLinear);
            end
            inertialinear = obj.Cache.InertiaLinear;
        end
        
        function set.InertiaLinear(obj, inertialinear)
            %set.InertiaLinear Set the value for property InertiaLinear
            validateattributes(inertialinear, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'SetForceControlParamsRequest', 'InertiaLinear');
            
            obj.JavaMessage.setInertiaLinear(inertialinear.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.InertiaLinear)
                obj.Cache.InertiaLinear.setJavaObject(inertialinear.getJavaObject);
            end
        end
        
        function inertiaangular = get.InertiaAngular(obj)
            %get.InertiaAngular Get the value for property InertiaAngular
            if isempty(obj.Cache.InertiaAngular)
                obj.Cache.InertiaAngular = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getInertiaAngular);
            end
            inertiaangular = obj.Cache.InertiaAngular;
        end
        
        function set.InertiaAngular(obj, inertiaangular)
            %set.InertiaAngular Set the value for property InertiaAngular
            validateattributes(inertiaangular, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'SetForceControlParamsRequest', 'InertiaAngular');
            
            obj.JavaMessage.setInertiaAngular(inertiaangular.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.InertiaAngular)
                obj.Cache.InertiaAngular.setJavaObject(inertiaangular.getJavaObject);
            end
        end
        
        function dampinglinear = get.DampingLinear(obj)
            %get.DampingLinear Get the value for property DampingLinear
            if isempty(obj.Cache.DampingLinear)
                obj.Cache.DampingLinear = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getDampingLinear);
            end
            dampinglinear = obj.Cache.DampingLinear;
        end
        
        function set.DampingLinear(obj, dampinglinear)
            %set.DampingLinear Set the value for property DampingLinear
            validateattributes(dampinglinear, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'SetForceControlParamsRequest', 'DampingLinear');
            
            obj.JavaMessage.setDampingLinear(dampinglinear.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.DampingLinear)
                obj.Cache.DampingLinear.setJavaObject(dampinglinear.getJavaObject);
            end
        end
        
        function dampingangular = get.DampingAngular(obj)
            %get.DampingAngular Get the value for property DampingAngular
            if isempty(obj.Cache.DampingAngular)
                obj.Cache.DampingAngular = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getDampingAngular);
            end
            dampingangular = obj.Cache.DampingAngular;
        end
        
        function set.DampingAngular(obj, dampingangular)
            %set.DampingAngular Set the value for property DampingAngular
            validateattributes(dampingangular, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'SetForceControlParamsRequest', 'DampingAngular');
            
            obj.JavaMessage.setDampingAngular(dampingangular.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.DampingAngular)
                obj.Cache.DampingAngular.setJavaObject(dampingangular.getJavaObject);
            end
        end
        
        function forceminlinear = get.ForceMinLinear(obj)
            %get.ForceMinLinear Get the value for property ForceMinLinear
            if isempty(obj.Cache.ForceMinLinear)
                obj.Cache.ForceMinLinear = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getForceMinLinear);
            end
            forceminlinear = obj.Cache.ForceMinLinear;
        end
        
        function set.ForceMinLinear(obj, forceminlinear)
            %set.ForceMinLinear Set the value for property ForceMinLinear
            validateattributes(forceminlinear, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'SetForceControlParamsRequest', 'ForceMinLinear');
            
            obj.JavaMessage.setForceMinLinear(forceminlinear.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ForceMinLinear)
                obj.Cache.ForceMinLinear.setJavaObject(forceminlinear.getJavaObject);
            end
        end
        
        function forceminangular = get.ForceMinAngular(obj)
            %get.ForceMinAngular Get the value for property ForceMinAngular
            if isempty(obj.Cache.ForceMinAngular)
                obj.Cache.ForceMinAngular = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getForceMinAngular);
            end
            forceminangular = obj.Cache.ForceMinAngular;
        end
        
        function set.ForceMinAngular(obj, forceminangular)
            %set.ForceMinAngular Set the value for property ForceMinAngular
            validateattributes(forceminangular, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'SetForceControlParamsRequest', 'ForceMinAngular');
            
            obj.JavaMessage.setForceMinAngular(forceminangular.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ForceMinAngular)
                obj.Cache.ForceMinAngular.setJavaObject(forceminangular.getJavaObject);
            end
        end
        
        function forcemaxlinear = get.ForceMaxLinear(obj)
            %get.ForceMaxLinear Get the value for property ForceMaxLinear
            if isempty(obj.Cache.ForceMaxLinear)
                obj.Cache.ForceMaxLinear = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getForceMaxLinear);
            end
            forcemaxlinear = obj.Cache.ForceMaxLinear;
        end
        
        function set.ForceMaxLinear(obj, forcemaxlinear)
            %set.ForceMaxLinear Set the value for property ForceMaxLinear
            validateattributes(forcemaxlinear, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'SetForceControlParamsRequest', 'ForceMaxLinear');
            
            obj.JavaMessage.setForceMaxLinear(forcemaxlinear.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ForceMaxLinear)
                obj.Cache.ForceMaxLinear.setJavaObject(forcemaxlinear.getJavaObject);
            end
        end
        
        function forcemaxangular = get.ForceMaxAngular(obj)
            %get.ForceMaxAngular Get the value for property ForceMaxAngular
            if isempty(obj.Cache.ForceMaxAngular)
                obj.Cache.ForceMaxAngular = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getForceMaxAngular);
            end
            forcemaxangular = obj.Cache.ForceMaxAngular;
        end
        
        function set.ForceMaxAngular(obj, forcemaxangular)
            %set.ForceMaxAngular Set the value for property ForceMaxAngular
            validateattributes(forcemaxangular, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'SetForceControlParamsRequest', 'ForceMaxAngular');
            
            obj.JavaMessage.setForceMaxAngular(forcemaxangular.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ForceMaxAngular)
                obj.Cache.ForceMaxAngular.setJavaObject(forcemaxangular.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.InertiaLinear = [];
            obj.Cache.InertiaAngular = [];
            obj.Cache.DampingLinear = [];
            obj.Cache.DampingAngular = [];
            obj.Cache.ForceMinLinear = [];
            obj.Cache.ForceMinAngular = [];
            obj.Cache.ForceMaxLinear = [];
            obj.Cache.ForceMaxAngular = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.InertiaLinear = copy(obj.InertiaLinear);
            cpObj.InertiaAngular = copy(obj.InertiaAngular);
            cpObj.DampingLinear = copy(obj.DampingLinear);
            cpObj.DampingAngular = copy(obj.DampingAngular);
            cpObj.ForceMinLinear = copy(obj.ForceMinLinear);
            cpObj.ForceMinAngular = copy(obj.ForceMinAngular);
            cpObj.ForceMaxLinear = copy(obj.ForceMaxLinear);
            cpObj.ForceMaxAngular = copy(obj.ForceMaxAngular);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.InertiaLinear = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.InertiaLinear);
            obj.InertiaAngular = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.InertiaAngular);
            obj.DampingLinear = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.DampingLinear);
            obj.DampingAngular = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.DampingAngular);
            obj.ForceMinLinear = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.ForceMinLinear);
            obj.ForceMinAngular = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.ForceMinAngular);
            obj.ForceMaxLinear = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.ForceMaxLinear);
            obj.ForceMaxAngular = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.ForceMaxAngular);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.InertiaLinear = saveobj(obj.InertiaLinear);
            strObj.InertiaAngular = saveobj(obj.InertiaAngular);
            strObj.DampingLinear = saveobj(obj.DampingLinear);
            strObj.DampingAngular = saveobj(obj.DampingAngular);
            strObj.ForceMinLinear = saveobj(obj.ForceMinLinear);
            strObj.ForceMinAngular = saveobj(obj.ForceMinAngular);
            strObj.ForceMaxLinear = saveobj(obj.ForceMaxLinear);
            strObj.ForceMaxAngular = saveobj(obj.ForceMaxAngular);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.kinova_msgs.SetForceControlParamsRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.kinova_msgs.SetForceControlParamsRequest;
            obj.reload(strObj);
        end
    end
end
